Information Gathering

1. Directory Bruteforcing 

   Tools Used: Gobuster

   Command: gobuster dir -k -u https://ergos.in -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt|tee gobuster.txt

   Screenshots:

   Summary:

      1. wp-includes, wp-admin proves that this website is made up of wordpress.
      2. Cgi-bin directory is also exposed which contains all the cgi-scripts. This can lead to a potential shellshock attack. But while visiting it, with help of burpsuite, it turns out
         that it is giving a status code of 403(Forbidden). Same is for /mailman page and /wp-includes/ directory. 
      3. Some pages were redirecting to a different page containg some date and name in the path. Seems like they are some posts made on the date mentioned 
         in the URL. 
      4. wp-login.php page and a webmail can also be found.


2. Robots.txt
    
   Screenshots:

    Summary:

       1. robots.txt file disallows any user-agent to visit /wp-admin/ directory. Trying to visit that directory will redirect the request to /wp-login.php
       2. However, robots.txt file allows visiting the page /wp-admin/admin-ajax.php. But, visiting this page only displays "0".
       3. Sitemap can also be seen in xml format. "admin" is the only user who is responsible for wrting the posts.   
    
3. xmlrpc.php

   Description:

      XML-RPC on WordPress is actually an API that allows developers who make 3rd party application and services the ability to interact to your WordPress site. The XML-RPC API that WordPress provides several key functionalities that include:

      * Publish a post
      * Edit a post
      * Delete a post.
      * Upload a new file (e.g. an image for a post)
      * Get a list of comments
      * Edit comments


   Screenshots:

   Summary:
      1. Since it is a wordpress website, there was a possibility for the xmlrpc.php file to be exposed. And it is exposed.  
      2. After checking the functionality of the XML-RPC server, it seems like the XML-RPC server is disabled. Following xml document was used to check the funtionality.
         
         <?xml version="1.0" encoding="utf-8"?> 
         <methodCall> 
         <methodName>system.listMethods</methodName> 
         <params></params> 
         </methodCall>

4. Article Posts:

   Screenshots:

   Summary: 
      1. Articles list can be found in the url https://ergos.in/wp-sitemap-posts-post-1.xml 
      2. All articles have a "Submit a comment" section which requires user input.   




Tools/Methods Used:

 1. XSS(Reflected):

      * Since comments field takes user input, there is a possibility of cross site scripting.
      * Following data was given as input
         
         Screenshots 

      * The input data is reflected as it is and is undergoing moderation, which is one of the features of wordpress. Also, by default, a plugin named Akismet Anti-Spam is already active 
        on every wordpress website. So, none of the comments were able to bypass the moderation. 
      
      * Input data in script tags was also put as shown below

        Screenshots   

      * It seems like it is running Mod_Security 
        ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave's SpiderLabs. 
        It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, 
        logging and real-time analysis. It protects from attacks like XSS, SQLi, etc.
        


2. SQL injection:

      * SQl injection was tried in both login pages, i.e. wp-login.php and /webmail(it redirected to https://ergos.in:2096 as webmail was running on port 2096).

        Screenshots

      * It seems like mod_security is preventing the attack as it can protect against sql injections as well.
      * Even after trying some advanced payloads it did not work.


3. Weak credentials:
      
      * From sitemap's users listing, we got a user named "admin" who is writing the articles.
      * So, some common username:password pairs like admin:admin, admin:password, admin:root, etc were put in the wp-login.php website.
        
        Screenshots

      * But none of them worked. 
         
      Note: 
         It can be seen from the above screenshots that the error message is saying that "The password you entered for the username admin is incorrect".
         This particularly confirms that a user named "admin" surely exists which is itself a vulnerability as it allows attackers to focus only on finding out the password. To solve this problem, a common error message can be displayed for both wrong username and wrong password. For example, error message can be "Username or password is wrong".  


4.  Brute-Forcing:
      
       Tool Used: Hydra
       Command: hydra -l admin -P /usr/share/wordlists/rockyou.txt ergos.in https-post-form "/wp-login.php:username=^USER^&password=^PASS^:F=Error" -t 64 

      * Brute-forcing was done to bypass the wp-login.php page. "admin" was taken as the username and "rockyou.txt" was taken as the password list.
        
        Screenshots

      * At first, it seems like the login page is allowing brute-forcing which is a vulnerability.
         
         Screenshots
      
      * But while trying to visit the page from the browser, it displayed the above error which is again generated by mod_security. Since mod_security is a WAF, it can be easily configured to 
        block brute-force. In this case. it was blocking the IP as the page can no loger be visited. Since VPN was used, restarting the VPN service gives a new IP and webpage was again accessible.